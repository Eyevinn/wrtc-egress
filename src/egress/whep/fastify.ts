import { FastifyInstance, FastifyReply, FastifyRequest } from "fastify";
import { WHEPEndpoint } from "../whep";
import { WhepViewer } from "./viewer";

type Request = FastifyRequest<{
  Params: {
    channelId: string
  }
}>

type PutRequest = FastifyRequest<{
  Params: {
    channelId: string,
    viewerId: string
  },
  Body: string;
}>

type PatchRequest = FastifyRequest<{
  Params: {
    channelId: string,
    viewerId: string
  },
  Body: string;
}>

type PostRequest = FastifyRequest<{
  Params: {
    channelId: string
  },
  Body: {};
}>

export default function (fastify: FastifyInstance, opts: any, done) {
  const adapter: WHEPEndpoint = opts.adapter;

  fastify.addContentTypeParser('application/sdp', { parseAs: "string" }, (req, body, done) => {
    done(null, body);
  })

  fastify.addContentTypeParser('application/trickle-ice-sdpfrag', { parseAs: "string" }, (req, body, done) => {
    done(null, body);
  })

  fastify.options("/channel/:channelId", {}, async (request: PostRequest, reply: FastifyReply) => {
    try {
      reply.headers({
        "Accept-POST": [ "application/sdp" ],
      });
      reply.code(204).send();
    } catch (e) {
      console.error(e);
      const err = new Error("Options request failed, see server logs for more details");
      reply.code(500).send(err.message);
    }
  });

  fastify.post("/channel/:channelId", {}, async (request: PostRequest, reply: FastifyReply) => {
    try {
      if (request.body !== '') {
        reply.code(400).send('SDP offer generated by the WHEP player not supported');
        return;
      }

      const channelId = request.params.channelId;

      const viewer = adapter.createViewer(channelId, 
        adapter.getResourceIdForChannel(channelId), 
        adapter.getMediaStreamsForChannel(channelId));

      viewer.on("connect", () => {
        adapter.addViewerToChannel(channelId, viewer);
      });
      viewer.on("disconnect", () => {
        adapter.removeViewerFromChannel(channelId, viewer);
      });

      const responseBody = await viewer.generateOfferResponse();

      reply.code(201)
        .headers({
          'Content-type': 'application/sdp',
          'Location': adapter.getBaseUrl() + "/channel/" + channelId + '/' + viewer.getId()
        })
        .send(responseBody);

    } catch (e) {
      console.error(e);
      const err = new Error("Exception thrown when handling a new WHEP client connection, see server logs for more details");
      reply.code(500).send(err.message);
    }
  });

  fastify.options("/channel/:channelId/:viewerId", {}, async (request: PatchRequest, reply: FastifyReply) => {
    const channelId = request.params.channelId;
    const viewerId = request.params.viewerId;

    console.log(`channelId ${channelId}, viewerId ${viewerId}`);

    try {
      reply.headers({
        "Accept": [ "application/sdp" ],
        "Allow": [ "PATCH" ]
      });
      reply.code(204).send();
    } catch (e) {
      console.error(e);
      const err = new Error("Exception thrown see server logs for more details");
      reply.code(500).send(err.message);
    }
  });

  fastify.patch("/channel/:channelId/:viewerId", {}, async (request: PatchRequest, reply: FastifyReply) => {
    try {
      if (request.headers["content-type"] === 'application/trickle-ice-sdpfrag') {
        reply.code(405).send();
        return;
      }

      const channelId = request.params.channelId;
      const viewerId = request.params.viewerId;

      console.log(`channelId ${channelId}, viewerId ${viewerId}`);

      const viewer = adapter.getViewerForChannel(channelId, viewerId);
      if (!viewer) {
        console.error(`channelId ${channelId}, viewerId ${viewerId} not found`);
        reply.code(404).send();
        return;
      }

      await viewer.handleAnswerRequest(request.body);
      reply.code(204).send();

    } catch (e) {
      console.error(e);
      const err = new Error("Exception thrown when handling answer from WHEP client");
      reply.code(500).send(err.message);
    }
  });

  fastify.get("/channel", {}, async (request: FastifyRequest, reply: FastifyReply) => {
    try {
      const channels = adapter.getChannelList();
      reply.code(200).send(channels.map(channelId => {
        return {
          channelId: channelId,
          resource: adapter.getBaseUrl() + "/channel/" + channelId,
        };
      }));
    } catch (e) {
      console.error(e);
      const err = new Error("Exception thrown when listing channels");
      reply.code(500).send(err.message);
    }
  });
  done();
}
